// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: course.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoursecenterClient is the client API for Coursecenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoursecenterClient interface {
	GetCourseInfo(ctx context.Context, in *GetCourseInfoReq, opts ...grpc.CallOption) (*GetCourseInfoResp, error)
}

type coursecenterClient struct {
	cc grpc.ClientConnInterface
}

func NewCoursecenterClient(cc grpc.ClientConnInterface) CoursecenterClient {
	return &coursecenterClient{cc}
}

func (c *coursecenterClient) GetCourseInfo(ctx context.Context, in *GetCourseInfoReq, opts ...grpc.CallOption) (*GetCourseInfoResp, error) {
	out := new(GetCourseInfoResp)
	err := c.cc.Invoke(ctx, "/pb.coursecenter/GetCourseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoursecenterServer is the server API for Coursecenter service.
// All implementations must embed UnimplementedCoursecenterServer
// for forward compatibility
type CoursecenterServer interface {
	GetCourseInfo(context.Context, *GetCourseInfoReq) (*GetCourseInfoResp, error)
	mustEmbedUnimplementedCoursecenterServer()
}

// UnimplementedCoursecenterServer must be embedded to have forward compatible implementations.
type UnimplementedCoursecenterServer struct {
}

func (UnimplementedCoursecenterServer) GetCourseInfo(context.Context, *GetCourseInfoReq) (*GetCourseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseInfo not implemented")
}
func (UnimplementedCoursecenterServer) mustEmbedUnimplementedCoursecenterServer() {}

// UnsafeCoursecenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoursecenterServer will
// result in compilation errors.
type UnsafeCoursecenterServer interface {
	mustEmbedUnimplementedCoursecenterServer()
}

func RegisterCoursecenterServer(s grpc.ServiceRegistrar, srv CoursecenterServer) {
	s.RegisterService(&Coursecenter_ServiceDesc, srv)
}

func _Coursecenter_GetCourseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursecenterServer).GetCourseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.coursecenter/GetCourseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursecenterServer).GetCourseInfo(ctx, req.(*GetCourseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Coursecenter_ServiceDesc is the grpc.ServiceDesc for Coursecenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coursecenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.coursecenter",
	HandlerType: (*CoursecenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourseInfo",
			Handler:    _Coursecenter_GetCourseInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course.proto",
}
